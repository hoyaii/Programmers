class Solution {
    static int cnt = 0;
    static boolean[] col_visited;
    static boolean[] rig_visited;
    static boolean[] lef_visited;
    static boolean[][] board;  
    static int n;

    public int solution(int n) {
        Solution.n = n;
        cnt = 0;
        board = new boolean[n][n];

        col_visited = new boolean[n];       
        rig_visited = new boolean[2*n];     
        lef_visited = new boolean[2*n];     

        dfs(0);
        return cnt;
    }

    private void dfs(int row) {
        if (row == n) {
            cnt++;
            return;
        }

        for (int col = 0; col < n; col++) {
            if ( !col_visited[col]
              && !rig_visited[row + col]
              && !lef_visited[row - col + n] ) {

                board[row][col] = true;
                col_visited[col] = true;
                rig_visited[row + col] = true;
                lef_visited[row - col + n] = true;

                dfs(row + 1);

                board[row][col] = false;
                col_visited[col] = false;
                rig_visited[row + col] = false;
                lef_visited[row - col + n] = false;
            }
        }
    }
}
