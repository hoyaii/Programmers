import java.util.*;
class Solution {
    static int maxSheep = 1; // 루트에 양 1마리가 있으니, 최대값은 1부터 시작
    public int solution(int[] info, int[][] edges) {
        List<List<Integer>> children = new ArrayList<>();
        for (int i = 0; i < info.length; i++) children.add(new ArrayList<>());
        for (int[] e : edges) children.get(e[0]).add(e[1]);

        // 초기 후보 (루트의 자식 노드들)
        List<Integer> candidates = new ArrayList<>(children.get(0));

        dfs(1, 0, candidates, info, children); 
        return maxSheep;
    }

    private void dfs(int sheep, int wolf, List<Integer> cand, int[] info, List<List<Integer>> children) { 
        for (int node : cand) {
            int nextSheep = info[node] == 0 ? sheep + 1 : sheep;
            int nextWolf = info[node] == 1 ? wolf + 1 : wolf;
            if (nextWolf >= nextSheep) continue; // 규칙 위반      

            maxSheep = Math.max(maxSheep, nextSheep); // 최대 양 수 갱신

            // 다음 단계 후보 리스트 준비
            List<Integer> nextCand = new ArrayList<>(cand);
            nextCand.remove(Integer.valueOf(node)); // 선택한 노드 제외
            nextCand.addAll(children.get(node)); // 자식 노드를 후보에 추가

            dfs(nextSheep, nextWolf, nextCand, info, children);
        }
    }
}
