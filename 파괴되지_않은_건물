class Solution {
    public int solution(int[][] board, int[][] skill) {
        int n = board.length;
        int m = board[0].length;
        // 변화량을 기록할 배열
        int[][] delta = new int[n + 1][m + 1];

        // 모든 스킬에 대해 변화량의 시작과 끝 지점만 표시
        for (int[] sk : skill) {
            int type = sk[0];
            int r1 = sk[1], c1 = sk[2];
            int r2 = sk[3], c2 = sk[4];
            int degree = (type == 1) ? -sk[5] : sk[5];

            delta[r1][c1] += degree;
            delta[r1][c2 + 1] -= degree;
            delta[r2 + 1][c1] -= degree;
            delta[r2 + 1][c2 + 1] += degree;
        }

        // 누적 합 계산으로 각 칸의 최종 변화량 구하기
        // 1st 좌에서 우로 누적 합
        for (int i = 0; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                delta[i][j] += delta[i][j - 1];
            }
        }

        // 2nd 위에서 아래로 누적 합
        for (int j = 0; j <= m; j++) {
            for (int i = 1; i <= n; i++) {
                delta[i][j] += delta[i - 1][j];
            }
        }

        // 기존 배열과 변화량 배열을 합쳐 파괴되지 않은 건물 세기
        int answer = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] + delta[i][j] > 0) answer++;
            }
        }

        return answer;
    }
}
