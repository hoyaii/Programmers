import java.util.*;
class Solution {    
    private int[][] COST = {
        { 1,7,6,7,5,4,5,3,2,3 }, // 0
        { 7,1,2,4,2,3,5,4,5,6 }, // 1
        { 6,2,1,2,3,2,3,5,4,5 }, // 2
        { 7,4,2,1,5,3,2,6,5,4 }, // 3
        { 5,2,3,5,1,2,4,2,3,5 }, // 4
        { 4,3,2,3,2,1,2,3,2,3 }, // 5
        { 5,5,3,2,4,2,1,5,3,2 }, // 6
        { 3,4,5,6,2,3,5,1,2,4 }, // 7
        { 2,5,4,5,3,2,3,2,1,2 }, // 8
        { 3,6,5,4,5,3,2,4,2,1 }  // 9
    };

    public int solution(String numbers) {
        int n = numbers.length();

        // 3차원 DP -> DP[스테이지][left][right]=최소시간
        int[][][] dp = new int[n+1][10][10];
        
        // DP 배열의 값 MAX로 초기화 
        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= 9; j++){
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        
        // 시작위치는 왼손 4, 오른손 6
        dp[0][4][6] = 0;
        
        // 스테이지 1부터 DP 쭉 진행
        for(int s = 0; s < n; s++){
            int d = numbers.charAt(s) - '0';
            
            for(int l = 0; l <= 9; l++){
                for(int r = 0; r <= 9; r++){
                    // 왼손과 오른손이 같은 다이얼을 누르는 경우는 존재 X
                    if(l == r) continue;
                    
                    // 최대값이 아님 -> 갱신 가능
                    if(dp[s][l][r] != Integer.MAX_VALUE){
                        // 왼손 이동
                        dp[s+1][d][r] = Math.min(dp[s+1][d][r], dp[s][l][r] + COST[l][d]);
                        
                        // 오른손 이동
                        dp[s+1][l][d] = Math.min(dp[s+1][l][d], dp[s][l][r] + COST[r][d]);
                    }   
                }
            }
        }
        
        int answer = Integer.MAX_VALUE;
        for(int l = 0; l <= 9; l++){
            for(int r = 0; r <= 9; r++){
                answer = Math.min(answer, dp[n][l][r]);
            }
        }
        
        return answer;
    }
}
