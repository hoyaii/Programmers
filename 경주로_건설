import java.util.*;
class Solution {
    static int[] dr = {1, -1, 0, 0};
    static int[] dc = {0, 0, 1, -1};
    static int n;
    static int min = Integer.MAX_VALUE;

    static int[][][] best;

    public int solution(int[][] board) {
        n = board.length;

        best = new int[4][n][n];
        for (int d = 0; d < 4; d++) {
            for (int r = 0; r < n; r++) {
                Arrays.fill(best[d][r], Integer.MAX_VALUE);
            }
        }

        boolean[][] visited1 = new boolean[n][n];
        boolean[][] visited2 = new boolean[n][n];
        visited1[0][0] = true;
        visited2[0][0] = true;

        dfs(0, 0, 0, 0, board, visited1); // 아래쪽으로 이동
        dfs(0, 0, 2, 0, board, visited2); // 오른쪽으로 이동

        return min;
    }

    private void dfs(int r, int c, int dir, int cost, int[][] board, boolean[][] visited) {
        int limit = Math.min(min, best[dir][r][c]);
        if (cost >= limit) return; // 두 컷을 한 줄로 통합
        best[dir][r][c] = cost; // 현 상태 최저비용 갱신

        if (r == n - 1 && c == n - 1) { // 목적지
            min = cost;
            return;
        }

        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i], nc = c + dc[i];
            if (nr < 0 || nr >= n || nc < 0 || nc >= n) continue;
            if (board[nr][nc] == 1 || visited[nr][nc]) continue;

            visited[nr][nc] = true;
            dfs(nr, nc, i, cost + (i == dir ? 100 : 600), board, visited);
            visited[nr][nc] = false;
        }
    }
}
