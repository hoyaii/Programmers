import java.util.*;
class Solution {
    private Set<Set<String>> uniqueSets = new HashSet<>();

    public int solution(String[] userIds, String[] bannedIds) {
        backtrack(0, new boolean[userIds.length], bannedIds, userIds, new HashSet<>());
        return uniqueSets.size();
    }

    private void backtrack(int depth, boolean[] visited, String[] bannedIds,
                     String[] userIds,Set<String> currentSet) {
        if (depth == bannedIds.length) { // 모든 banned_id 처리
            if (currentSet.size() == bannedIds.length) {
                uniqueSets.add(new HashSet<>(currentSet)); // 순서와 무관한 조합 저장
            }
            return;
        }

        String banned = bannedIds[depth];

        for (int i = 0; i < userIds.length; i++) {
            if (visited[i]) continue; // 이미 방문

            String user = userIds[i];
            if (user.length() != banned.length()) continue; // 길이가 다름
            if (!isMatch(user, banned)) continue; // 문자가 일치하지 않음

            visited[i] = true;
            currentSet.add(user);

            backtrack(depth + 1, visited, bannedIds, userIds, currentSet);

            visited[i] = false;
            currentSet.remove(user);
        }
    }

    private boolean isMatch(String user, String pattern) {
        for (int i = 0; i < user.length(); i++) {
            if (pattern.charAt(i) == '*') continue; // 마스킹 처리된 거
            if (user.charAt(i) != pattern.charAt(i)) return false; // 문자가 일치 X
        }
        return true;
    }
}
