import java.util.*;
class Solution {
    public int[] solution(String[] operations) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
        Map<Integer, Integer> map = new HashMap<>();

        for (String opStr : operations) {
            String[] parts = opStr.split(" ");
            String cmd = parts[0];
            int num = Integer.parseInt(parts[1]);

            if ("I".equals(cmd)) {
                // 삽입 연산
                minHeap.offer(num);
                maxHeap.offer(num);
                map.put(num, map.getOrDefault(num, 0) + 1);

            } else if ("D".equals(cmd)) {
                if (map.isEmpty()) continue;

                if (num == 1) {
                    // 최댓값 삭제
                    cleanHeap(maxHeap, map);
                    if (!maxHeap.isEmpty()) {
                        int maximum = maxHeap.poll();
                        decrementCount(map, maximum);
                    }
                } else {
                    // 최솟값 삭제
                    cleanHeap(minHeap, map);
                    if (!minHeap.isEmpty()) {
                        int minimum = minHeap.poll();
                        decrementCount(map, minimum);
                    }
                }
            }
        }

        // 최종 결과 계산 전 한 번 더 정리
        cleanHeap(maxHeap, map);
        cleanHeap(minHeap, map);

        if (map.isEmpty()) {
            return new int[]{0, 0};
        }

        return new int[]{ maxHeap.peek(), minHeap.peek() };
    }


    // 힙의 peek() 원소가 map에 남아있는 카운트가 0이면 제거    
    private void cleanHeap(PriorityQueue<Integer> heap, Map<Integer, Integer> map) {
        while (!heap.isEmpty() && map.getOrDefault(heap.peek(), 0) == 0) {
            heap.poll();
        }
    }

    private void decrementCount(Map<Integer, Integer> map, int key) {
        int cnt = map.get(key);
        if (cnt <= 1) {
            map.remove(key);
        } else {
            map.put(key, cnt - 1);
        }
    }
}
