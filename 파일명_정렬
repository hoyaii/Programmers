import java.util.*;
class Solution {
    public String[] solution(String[] files) {
        int n = files.length;
        // [HEAD, NUMBER, INDEX]를 담을 2차원 배열
        String[][] parsed = new String[n][3];

        // 파싱 -> "HEAD, NUMBER, 입력순서" 저장
        for (int i = 0; i < n; i++) {
            parsed[i] = parse(files[i], i);
        }

        Arrays.sort(parsed, (a, b) -> {
            // 1st HEAD 비교 (대소문자 구분 없이)
            String h1 = a[0].toLowerCase();
            String h2 = b[0].toLowerCase();
            if (!h1.equals(h2)) {
                return h1.compareTo(h2);
            }

            // 2nd NUMBER 비교 
            int num1 = Integer.parseInt(a[1]);
            int num2 = Integer.parseInt(b[1]);
            if (num1 != num2) {
                return Integer.compare(num1, num2);
            }

            // 3rd 입력된 순서 비교
            int idx1 = Integer.parseInt(a[2]);
            int idx2 = Integer.parseInt(b[2]);
            return Integer.compare(idx1, idx2);
        });

        // 정렬 결과를 바탕으로 원본 파일명 재배열
        String[] answer = new String[n];
        for (int i = 0; i < n; i++) {
            int origIdx = Integer.parseInt(parsed[i][2]);
            answer[i] = files[origIdx];
        }
        return answer;
    }

    private String[] parse(String file, int idx) {
        int start = 0, end = file.length();

        // NUMBER 구간 시작 위치 찾기
        while (start < file.length() && !Character.isDigit(file.charAt(start))) {
            start++;
        }
        // NUMBER 구간 끝 위치 찾기
        end = start;
        while (end < file.length() && Character.isDigit(file.charAt(end))) {
            end++;
        }

        String head = file.substring(0, start);
        String number = file.substring(start, end);

        return new String[]{ head, number, String.valueOf(idx) };
    }
}
