import java.util.*;
public class Solution {
    public long solution(int[] weights) {
        final int MIN_WEIGHT = 100;
        final int MAX_WEIGHT = 1000;
        
        // 무게별 빈도 수 세기
        int[] freq = new int[MAX_WEIGHT + 1];
        for (int w : weights) {
            if (w >= MIN_WEIGHT && w <= MAX_WEIGHT) {
                freq[w]++;
            }
        }
        
        long answer = 0L;
        
        // 같은 무게끼리 짝짓기 -> C(n,2) = n*(n-1)/2
        for (int w = MIN_WEIGHT; w <= MAX_WEIGHT; w++) {
            long cnt = freq[w];
            answer += cnt * (cnt - 1) / 2;
        }
        
        // 비율이 2:1, 3:2, 4:3 인 경우 처리
        for (int w = MIN_WEIGHT; w <= MAX_WEIGHT; w++) {
            int cnt = freq[w];
            if (cnt == 0) continue;
            
            // 2:1 비율 → (w, 2w)
            int partner = w * 2;
            if (partner <= MAX_WEIGHT) {
                answer += (long)cnt * freq[partner];
            }
            
            // 3:2 비율 → (w, 3/2 w) — w가 2의 배수여야 정수
            if (w % 2 == 0) {
                partner = w * 3 / 2;
                if (partner <= MAX_WEIGHT) {
                    answer += (long)cnt * freq[partner];
                }
            }
            
            // 4:3 비율 → (w, 4/3 w) — w가 3의 배수여야 정수
            if (w % 3 == 0) {
                partner = w * 4 / 3;
                if (partner <= MAX_WEIGHT) {
                    answer += (long)cnt * freq[partner];
                }
            }
        }
        
        return answer;
    }
}
