import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        // 대기 중인 트럭을 담는 큐
        Deque<Integer> waiting = new ArrayDeque<>();
        for (int w : truck_weights) {
            waiting.offer(w);
        }

        // 다리 위의 트럭들을 담는 큐
        Deque<int[]> bridge = new ArrayDeque<>();

        int currentWeight = 0; // 다리 위 트럭들의 총 무게
        int time = 0; // 현재 시간

        // 트럭 이동 시작!
        while (!waiting.isEmpty() || !bridge.isEmpty()) {
            // 다리에서 빠져나갈 트럭이 있는지 확인
            if (!bridge.isEmpty()) {
                int[] front = bridge.peek();  
                int enterTime = front[1];
                
                // 빠져나가면 무게에서 빼주기
                if (time == enterTime + bridge_length) {    
                    currentWeight -= bridge.poll()[0];
                }
            }

            // 다음 대기 트럭을 올릴 수 있으면 올리기
            if (!waiting.isEmpty() && currentWeight + waiting.peek() <= weight) {
                int truck = waiting.poll();
                currentWeight += truck;
                bridge.offer(new int[]{truck, time}); // 진입 시각으로 time 저장
            }

            time++;
        }

        return time;
    }
}
