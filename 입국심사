import java.util.*;
class Solution {
    public long solution(int n, int[] times) {
        long low = 1L;
        long max = 0L;
        for (int t : times) max = Math.max(max, t);
        long high = max * (long) n; // 상한값
        long answer = 0L;             

        while (low <= high) {
            long mid = low + (high - low) / 2;
            long val = count(times, mid, n); 

            if (n == val) { // 딱 n명 처리 가능. 충분 -> 더 작은 시간으로 줄여 최소값 탐색
                answer = mid;
                high = mid - 1;
            } else if (n < val) { // n보다 많이 처리 가능. 역시 충분 -> 더 줄여본다
                answer = mid;
                high = mid - 1;
            } else if (n > val) { // 부족 -> 시간을 더 늘린다
                low = mid + 1;
            }
        }
        return answer;
    }

    private long count(int[] times, long t, long need) {
        long sum = 0L;
        for (int time : times) {
            sum += t / time;
        }

        return sum;
    }
}
