import java.util.*;
class Solution {
    public int solution(int[] picks, String[] minerals) {
        // 곡괭이를 사용할 순서를 결정하기 위한 큐 => 다이어, 철, 돌 순으로 놓은다 (최소 비용을 위해)
        Deque<String> pickQueue = new ArrayDeque<>();
        for (int i = 0; i < picks[0]; i++) pickQueue.offer("diamond");
        for (int i = 0; i < picks[1]; i++) pickQueue.offer("iron");
        for (int i = 0; i < picks[2]; i++) pickQueue.offer("stone");

        // 실제 사용할 수 있는 곡괭이 총 개수
        int totalPicks = picks[0] + picks[1] + picks[2];

        // 전체 광물을 5개씩 묶었을 때 가능한 청크 개수
        int totalChunks = (minerals.length + 4) / 5;

        //  실제로 만들고 고려해야 할 청크 개수
        int maxChunks = Math.min(totalChunks, totalPicks);

        // 청크 하나당 (시작 인덱스, 가중치 합) 형태로 저장할 우선순위 큐
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            return Integer.compare(b[1], a[1]); // weight가 큰 순서대로 꺼내도록 내림차순 정렬
        });

        // 청크별로 가중치 계산해 큐에 넣기
        for (int chunkIdx = 0; chunkIdx < maxChunks; chunkIdx++) {
            int startIndex = chunkIdx * 5;
            int endIndex = Math.min(startIndex + 5, minerals.length);

            int sumWeight = 0;
            for (int i = startIndex; i < endIndex; i++) {
                sumWeight += convert(minerals[i]);
            }

            chunkQueue.offer(new int[]{startIndex, sumWeight});
        }

        // 우선순위 큐에서 “가중치 큰 청크”부터 꺼내고, 곡괭이를 하나씩 꺼내서 실제 피로도를 계산
        int totalFatigue = 0;
        while (!chunkQueue.isEmpty() && !pickQueue.isEmpty()) {
            int[] curChunk = chunkQueue.poll();
            int startIndex = curChunk[0];

            // 곡괭이 타입을 pickQueue에서 꺼내기
            String pickType = pickQueue.poll();

            // 해당 청크에 대해 실제 피로도를 계산해 누적
            int endIndex = Math.min(startIndex + 5, minerals.length);
            for (int i = startIndex; i < endIndex; i++) {
                totalFatigue += process(pickType, minerals[i]);
            }
        }

        return totalFatigue;
    }

    // 곡괭이 타입과 광물 타입에 따른 실제 피로도 계산
    private int process(String pickType, String mineral) {
        if (pickType.equals("diamond")) {
            return 1;
        } else if (pickType.equals("iron")) {
            if (mineral.equals("diamond")) {
                return 5;
            } else {
                return 1;
            }
        } else { // "stone"
            if (mineral.equals("diamond")) {
                return 25;
            } else if (mineral.equals("iron")) {
                return 5;
            } else {
                return 1;
            }
        }
    }

    // 청크별 가중치 계산 => iamond→25, iron→5, stone→1 값을 리턴
    private int convert(String mineral) {
        if (mineral.equals("diamond")) {
            return 25;
        } else if (mineral.equals("iron")) {
            return 5;
        } else {
            return 1; // "stone"
        }
    }
}
