import java.util.*;
class Solution {
    public double[] solution(int k, int[][] ranges) {
        // 1st 수열 생성
        List<Integer> sequence = new ArrayList<>();
        sequence.add(k);
        while (k > 1) {
            if (k % 2 == 0) {
                k /= 2;
            } else {
                k = 3 * k + 1;
            }
            sequence.add(k);
        }
        int segments = sequence.size() - 1;  // 구간 수

        // 2nd 각 구간의 넓이 계산
        double[] widths = new double[segments];
        for (int i = 0; i < segments; i++) {
            widths[i] = (sequence.get(i) + sequence.get(i + 1)) * 0.5;
        }

        // 3rd 누적합 계산
        double[] prefixSum = new double[segments + 1];
        for (int i = 1; i <= segments; i++) {
            prefixSum[i] = prefixSum[i - 1] + widths[i - 1];
        }

        // 4th 정답 계산
        double[] answer = new double[ranges.length];
        for (int i = 0; i < ranges.length; i++) {
            int start = ranges[i][0];
            int end = segments + ranges[i][1];

            if (start > end) {
                answer[i] = -1.0;
                continue;
            }

            answer[i] = prefixSum[end] - prefixSum[start];
        }

        return answer;
    }
}
