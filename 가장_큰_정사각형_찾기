class Solution {
    public int solution(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int maxSide = 0;
        int[][] dp = new int[rows][cols];
        
        // 전체 보드를 한 번에 순회하면서 dp 계산
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] == 1) {
                    // 첫 행 또는 첫 열이면 무조건 1
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    }
                    maxSide = Math.max(maxSide, dp[i][j]);
                }
            }
        }
        
        return maxSide * maxSide;
    }
}
